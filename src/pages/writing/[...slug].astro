---
import '../../styles/global.css'
import '../../styles/writing-post.css'
import type { CollectionEntry } from 'astro:content'
import { getEntryBySlug } from 'astro:content'
import { Icon } from 'astro-icon'
import SEO from '../../components/SEO.astro'
import TOCList from '../../components/TOCList.astro'

export interface Params {
	slug: CollectionEntry<'writing'>['slug']
}

// export async function getStaticPaths() {
// 	const posts = await getCollection('writing')
// 	return posts.map(post => ({ params: { slug: post.slug } }))
// }

const post = await getEntryBySlug('writing', Astro.params.slug)
const { Content, headings } = await post.render()
const tabSize = post.data['tab-size'] || 4
---

<html lang='en'>
<head>
	<meta charset='utf-8' />
	<meta name='viewport' content='width=device-width, initial-scale=1' />

	<link rel='preconnect' href='https://fonts.googleapis.com' />
	<link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
	<link href='https://fonts.googleapis.com/css2?family=IBM+Plex+Mono&family=IBM+Plex+Sans:wght@400;600&family=IBM+Plex+Serif:ital,wght@0,400;0,600;1,400;1,600&family=Red+Hat+Display:wght@900&display=swap' rel='stylesheet' />

	{post.data.draft && <meta name='robots' content='noindex' />}

	<SEO
		title={post.data.title}
		description={post.data.abstract}
		banner={post.data.banner}
	/>
</head>
<body>
	<div class='container'>
		<main>
			<div id='__top__' />
			
			<h1>
				{ post.data.title}
			</h1>
				
			<div class='meta'>
				By 0x00er
				&middot;
				{post.data.date}
				{post.data.draft && <>&middot; Draft</>}
				&middot;
				<a href='/writing'>All posts</a>
			</div>

			<Content />
		</main>
	</div>

	<div class='toc-container'>
		<button class='toc-toggle' aria-hidden='true'>
			<Icon name='ion:list-sharp' class='icon-activate' />
			<Icon name='ion:chevron-right' class='icon-collapse' />
			<Icon name='ion:close-sharp' class='icon-x' />
		</button>

		<nav class='toc' aria-hidden='true'>
			<h2>Table of Contents</h2>
			
			<TOCList headings={[
				{ depth: 2, text: 'Intro', slug: '__top__' },
				...headings
			]} />
		</nav>
	</div>

	<script lang='javascript' define:vars={{ dev: import.meta.env.DEV }}>
		window.__ASTRO_DEV_MODE__ = dev
	</script>
	<script lang='javascript'>
		const scrollRestoreKey = `scroll-restore-${window.location.pathname}`

		// Scrollspy
		const leeway = 10
		const container = document.querySelector('.container')
		const headings = [ ...document.querySelectorAll('h1, h2, h3, h4, h5, h6') ]
			.filter(el => !!el.id)
		headings.reverse()

		let current = '__top__'
		const updateScrollspy = () => {
			for (const el of document.querySelectorAll('[data-scrollspy]')) {
				el.classList.toggle('scrollspy-active', el.dataset.scrollspy === current)

				if (el.dataset.scrollspy === current) {
					// Scroll the top-level block in the TOC into view
					const block = el.closest('.toc > ul > li')
					const scroller = el.offsetParent

					let newScrollTop = null
					if (block.offsetTop < scroller.scrollTop) {
						newScrollTop = block.offsetTop
						if (newScrollTop < 150) newScrollTop = 0
					} else if (block.offsetTop + block.offsetHeight > scroller.scrollTop + scroller.offsetHeight) {
						newScrollTop = block.offsetTop + block.offsetHeight - scroller.offsetHeight
						const maxScrollTop = scroller.scrollHeight - scroller.offsetHeight
						if (newScrollTop > maxScrollTop - 150) newScrollTop = maxScrollTop
					}

					if (newScrollTop !== null) scroller.scrollTop = newScrollTop
				}
			}
		}
		
		container.addEventListener('scroll', () => {
			let next = '__top__'
			for (const heading of headings) {
				if (container.scrollTop >= heading.offsetTop - leeway) {
					next = heading.id
					break
				}
			}
			if (next !== current) {
				current = next
				updateScrollspy()
			}

			if (window.__ASTRO_DEV_MODE__) {
				sessionStorage.setItem(scrollRestoreKey, container.scrollTop.toString())
			}
		}, { passive: true })

		updateScrollspy()

		// TOC toggle
		if (sessionStorage.getItem('toc-activated')) {
			document.body.classList.toggle('toc-activated', sessionStorage.getItem('toc-activated') !== 'false')
		}
		const toggleToc = () => {
			document.body.classList.toggle('toc-activated')
			sessionStorage.setItem(
				'toc-activated',
				document.body.classList.contains('toc-activated')
					? 'true'
					: 'false'
			)
		}
		document.querySelector('.toc-toggle').addEventListener('click', () => {
			toggleToc()
		})

		// Close TOC on link click on mobile
		document.body.addEventListener('click', (event) => {
			const isOpenMobile = window.getComputedStyle(document.querySelector('.icon-x')).display !== 'none'
			if (event.target.dataset.scrollspy && isOpenMobile) {
				toggleToc()
			}
		}, { capture: true, passive: true })

		// Restore scroll for live reloading
		setTimeout(() => {
			if (window.__ASTRO_DEV_MODE__ && sessionStorage.getItem(scrollRestoreKey)) {
				container.scrollTop = parseInt(sessionStorage.getItem(scrollRestoreKey))
			}
		}, 0)
	</script>

	<style define:vars={{ tabSize }}>
		main :global(pre) {
			tab-size: var(--tabSize);
		}
	</style>
</body>
</html>
